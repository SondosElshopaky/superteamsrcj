from controller import Robot, GPS, Lidar, Camera, InertialUnit #type: ignore
import cv2
import numpy as np
import math
import struct
from collections import deque
import random
#region defines
###############################################################DEFINES######################################################################
#define robot
robot = Robot()
timeStep = 32
timestep = 32


# define motors
right_wheel = robot.getDevice("wheel1 motor") #wheel1
left_wheel = robot.getDevice("wheel2 motor") #wheel2


#reseting motors
right_wheel.setPosition(float('inf'))
left_wheel.setPosition(float('inf'))
right_wheel.setVelocity(0.0)
left_wheel.setVelocity(0.0)


#define sensors
right_camera = robot.getDevice("cameraR")
left_camera = robot.getDevice("cameraL")
compass = robot.getDevice("inertial_unit") #inertial_unit
gps = robot.getDevice("gps")
color = robot.getDevice("colour_sensor")
lidar = robot.getDevice("lidar")
#distance_sensor = robot.getDevice("distance sensor1")
emitter = robot.getDevice("emitter")
receiver = robot.getDevice("receiver")
receiver.enable(timestep)


#enabling sensors
right_camera.enable(timestep)
left_camera.enable(timestep)
compass.enable(timestep)
gps.enable(timestep)
color.enable(timestep)
lidar.enable(timestep)
#distance_sensor.enable(timestep)


#define constants
max_velocity = 6.28
pi = math.pi


#define variables
velocity = max_velocity
compass_value=0
lidar_value=0
gps_readings = [0, 0, 0]


#define victim detection variables (letter)
detected_letter = None 
letter_is_stopped = False 
letter_stop_start_time = 0

#endregion

#region sensor values



#compass
def get_compass_value():
    global compass_value
    compass_value = compass.getRollPitchYaw()[2]
    compass_value = compass_value * 180 / math.pi  # convert to degrees
    compass_value = round(compass_value, 1)


#gps in cm
def get_gps_readings():
    gps_readings[0] = gps.getValues()[0]*100
    gps_readings[1] = gps.getValues()[1]*100
    gps_readings[2] = gps.getValues()[2]*100
    

#checks angle range and makes it from -180 to 180 only
def check_angle(angle):
    while angle > 180:
        angle -= 360
    while angle < -180:
        angle += 360
    return angle



def Scan_Camera1(img):
    # ray_index = ray_index_from_direction("right")
    # lidar_reading = lidar.getRangeImage()[ray_index] * 100
 
    

        img = right_camera.getImage()
        img2= left_camera.getImage()








        width = right_camera.getWidth()
        height = right_camera.getHeight()
        width2 = left_camera.getWidth()
        height2 = left_camera.getHeight()
        img = np.frombuffer(img, np.uint8).reshape((height, width, 4))  # BGRA format
        frame = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

        # Process the frame
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)

        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        img = frame.copy()




        img2 = np.frombuffer(img2, np.uint8).reshape((height2, width2, 4))  # BGRA format
        frame2 = cv2.cvtColor(img2, cv2.COLOR_BGRA2BGR)

        # Process the frame
        gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)
        _, thresh2 = cv2.threshold(gray2, 127, 255, cv2.THRESH_BINARY)

        contours2, _ = cv2.findContours(thresh2, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)



        if contours or contours2 :
            largest_contour = max(contours, key=cv2.contourArea)
            area = cv2.contourArea(largest_contour)
            print(area)



            if area >= 70 :
                
    

                # ===== Crop the biggest contour =====
                x, y, w, h = cv2.boundingRect(largest_contour)
                cropped = img[y:y + h, x:x + w]

                # ===== Split into 9 equal parts =====
                cell_h = h // 1
                cell_w = w // 2

                tiles = []
                
                for row in range(1):
                    for col in range(2):
                        x_start = col * cell_w
                        y_start = row * cell_h
                        tile = cropped[y_start:y_start + cell_h, x_start:x_start + cell_w]
                        tiles.append(tile)
                


                # ===== Show all 9 parts and check turquoise =====
                conttourq = []
                for i, tile in enumerate(tiles):
                    tile_hsv = cv2.cvtColor(tile, cv2.COLOR_BGR2HSV)

                    # Define turquoise color range


           

                    # Define dark mask for black corners
                    lower_black1 = np.array([0, 0, 0])
                    upper_black1 = np.array([180, 255, 50])
                    darkmask = cv2.inRange(tile_hsv, lower_black1, upper_black1)

                    black = cv2.countNonZero(darkmask) / (tile.shape[0] * tile.shape[1])
                    cv2.imwrite(f"c:/Users/CYBER-TECH/Desktop/saves/Tile {i+1}.png", tile)

                    if black > 0.3:
                        conttourq.append(True)
                    else:
                        conttourq.append(False)
                    
                    if conttourq [0] == True:
                        rotate_right()
                        move_forward
                    else : 
                        move_forward()


                print(conttourq)












#robot rotates right 90 degrees --> -90
def rotate_right():
    get_compass_value()
    need = (exact_angle(compass_value) - 90) #target angle
    check_angle(need)
    while robot.step(timeStep) != -1:
        get_compass_value()
        error = check_angle(need - compass_value)

        if abs(error) < 1.52:
            right_wheel.setVelocity(0)
            left_wheel.setVelocity(0)
            break

        right_wheel.setVelocity(-velocity * 0.29)
        left_wheel.setVelocity(velocity * 0.29)

def rotate_right1():
    get_compass_value()
    need = (exact_angle(compass_value) - 90) #target angle
    check_angle(need)
    sign = None
    while robot.step(timeStep) != -1:
        get_compass_value()
        error = check_angle(need - compass_value)

        if sign in None:
            sign = Scan_Camera1()

        if abs(error) < 1.52:
            right_wheel.setVelocity(0)
            left_wheel.setVelocity(0)
            break

        right_wheel.setVelocity(-velocity * 0.29)
        left_wheel.setVelocity(velocity * 0.29)
    return sign

def rotate_right2():
    get_compass_value()
    need = (exact_angle(compass_value) - 90) #target angle
    check_angle(need)
    sign = None
    while robot.step(timeStep) != -1:
        get_compass_value()
        error = check_angle(need - compass_value)

        if sign in None:
            sign = Scan_Camera2()

        if abs(error) < 1.52:
            right_wheel.setVelocity(0)
            left_wheel.setVelocity(0)
            break

        right_wheel.setVelocity(-velocity * 0.29)
        left_wheel.setVelocity(velocity * 0.29)
    return sign


#robot rotates left 90 degrees --> +90
def rotate_left():
    get_compass_value()
    need = (exact_angle(compass_value) + 90) #target angle
    check_angle(need)
    
    while robot.step(timeStep) != -1:
        get_compass_value()
        error = check_angle(need - compass_value)
        
        
        if abs(error) < 1.52:
            right_wheel.setVelocity(0)
            left_wheel.setVelocity(0)
            break
            
        right_wheel.setVelocity(velocity * 0.29)
        left_wheel.setVelocity(-velocity * 0.29)

def rotate_left2():
    get_compass_value()
    need = (exact_angle(compass_value) + 90) #target angle
    check_angle(need)
    
    sign = None
    while robot.step(timeStep) != -1:
        get_compass_value()
        error = check_angle(need - compass_value)
        
        if sign in None:
            sign = Scan_Camera2()
        
        if abs(error) < 1.52:
            right_wheel.setVelocity(0)
            left_wheel.setVelocity(0)
            break
            
        right_wheel.setVelocity(velocity * 0.29)
        left_wheel.setVelocity(-velocity * 0.29)
    return sign


# approximates angle to nearest quadrant angle
def exact_angle(angle):
    da=[0,90,180,-180,-90]
    correct_angle=0
    for i in range(5):
        if (abs(angle-da[i])<=5):
            correct_angle=da[i]
            break
    return correct_angle





#both motors positive
def move_forward():
    right_wheel.setVelocity(velocity)
    left_wheel.setVelocity(velocity)


#both motors negative
def move_backward():
    right_wheel.setVelocity(-velocity)
    left_wheel.setVelocity(-velocity)


#both motors zero
def stop():
    right_wheel.setVelocity(0)
    left_wheel.setVelocity(0)

da=[0,90,180,-180,-90]
angle_to_idx = {
    0: 0,
    90: 1,
    180: 2,
    -180: 2,
    -90: 3
    }

def get_current_xy():
    x=gps_readings[0]-xstart
    x = round(x / 12)
    x*=12
    y=gps_readings[2]-ystart
    y = round(y / 12)
    y*=12
    return x, y


dy = [[-12, 0, 0, 12],
        [0, -12, 12, 0],
        [12, 0, 0, -12],
        [0, 12, -12, 0]]
dx = [[0, 12, -12, 0],
        [-12, 0, 0, 12],
        [0, -12, 12, 0],
        [12, 0, 0, -12]]

def move_tile_forward():

    get_gps_readings()
    get_compass_value()

    #calculating el starting tile as a multiple of 12
    x, y = get_current_xy()
    cnt = 0

    targetx=x+dx[angle_to_idx[exact_angle(compass_value)]][0]
    targety=y+dy[angle_to_idx[exact_angle(compass_value)]][0]

    while(robot.step(timestep) != -1):
        cnt += 1

        get_gps_readings()
        if dx[angle_to_idx[exact_angle(compass_value)]][0] == 0 and abs(targety-(gps_readings[2]-ystart)) < 0.25:
            stop()
            break

        if dy[angle_to_idx[exact_angle(compass_value)]][0] == 0 and abs(targetx-(gps_readings[0]-xstart)) < 0.25:
            stop()
            break

    return

def move_tile_backward():

    get_gps_readings()
    get_compass_value()

    #calculating el starting tile as a multiple of 12
    x, y = get_current_xy()
    cnt = 0

    targetx=x+dx[angle_to_idx[check_angle(exact_angle(compass_value)-180)]][0]
    targety=y+dy[angle_to_idx[check_angle(exact_angle(compass_value)-180)]][0]

    while(robot.step(timestep) != -1):
        cnt += 1

        get_gps_readings()
        if dx[angle_to_idx[exact_angle(compass_value)]][0] == 0 and abs(targety-(gps_readings[2]-ystart)) < 0.25:
            stop()
            break

        if dy[angle_to_idx[exact_angle(compass_value)]][0] == 0 and abs(targetx-(gps_readings[0]-xstart)) < 0.25:
            stop()
            break

    return
    

#funciton en el robot yfdal mask ymino 3shan y2ra as much walls as possiblr
def strategy_1():
    if (robot.step(timestep)==-1):
        return
    
    sign = rotate_right1()

    if sign is None:
        sign=Scan_Camera1() #return el red ymin wla shmal
    if sign=='l':
        for i in range(0,4):
            move_tile_forward()
        
    else:
        for i in range(0,3):
            move_tile_backward()
    strategy_2()
    return
 
def strategy_2():
    if (robot.step(timestep)==-1):
        return

    sign = Scan_Camera2() #return el red ymin wla shmal
    sign2 = rotate_left2()
    if sign is None:
        sign = sign2
    sign2 = rotate_left2()
    if sign is None:
        sign = sign2
    sign2 = rotate_left2()
    if sign is None:
        sign = sign2
    sign2 = rotate_left2()
    if sign is None:
        sign = sign2

    
    if sign=='r':
        for i in range(0,4):
            move_tile_forward()
        
    else:
        for i in range(0,3):
            move_tile_backward()

        rotate_left()
        move_tile_forward()
        rotate_right()

        for i in range(0,3):
            move_tile_forward()

        rotate_left()
        move_tile_forward()

        sign = Scan_Camera2()

        move_tile_forward()
        if sign == 'r':
            rotate_right()
            for i in range(0,4):
                move_tile_forward()
        else:
            rotate_left()
            for i in range(0,3):
                move_tile_forward()

    strategy_3()
    return

def strategy_3():
    if (robot.step(timestep)==-1):
        return
    
    rotate_right()

    sign=Scan_Camera3() #return el red ymin wla shmal
    if sign=='l':
        for i in range(0,4):
            move_tile_forward()
        
    else:
        for i in range(0,3):
            move_tile_backward()
    strategy_2()
    return
    
#region main code
##################################################################### main code ########################################################################


################
robot.step(timeStep)

strategy_1()
    
get_gps_readings()
xstart=gps_readings[0]
ystart=gps_readings[2]


#endregion
